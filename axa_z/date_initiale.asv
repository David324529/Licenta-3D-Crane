%acesta se ruleaza dupa pasul 1
clear;
load('date_X.mat');  % se presupune că acest fișier conține uX, yX, Ts

% Extragem datele din structuri Simulink
u = uX.signals.values;
y = yX.signals.values;
t = uX.time;
Te = 0.01;  

% Condiții inițiale
N = length(u); %calculam nr de esantioane
idx_split = floor(N / 2);  % asigurare întreg, indexul la care impartim setul in doua

uHistSPAB = zeros(2,N); 
yHist = zeros(2,N);
uHistSPAB(2,:) = u(:)';
yHist(2,:) = y(:)';

% Inițializare
refVirt1 = zeros(2, idx_split);
refVirt2 = zeros(2, N - idx_split);
eVirt1   = zeros(2, idx_split);
eVirt2   = zeros(2, N - idx_split);
eVirt1L  = zeros(2, idx_split);
eVirt2L  = zeros(2, N - idx_split);
uHist1L  = zeros(2, idx_split);
uHist2L  = zeros(2, N - idx_split);

%% Modelul de referință
s = tf('s');
w0 = 2.5; zetta = 0.9;
MrefC = w0^2/(s^2+2*zetta*w0*s+w0^2); %model ref continuu
MrefD = c2d(MrefC,Te,'zoh'); %model ref  discret
mrefdfiltru = filt(MrefD.num{1},MrefD.den{1},Te); %creez un obiect filtrudiscret cu vector pt numarator si vector pt numitor
num = mrefdfiltru.num{1}; den = mrefdfiltru.den{1};  %num = [b0 b1 b2]; den = [1 a1 a2];
%Numerator: {[0 0 6.2500]} %    Denominator: {[1 4.5000 6.2500]}
b1 = num(2); b2 = num(3); a1 = den(2); a2 = den(3);
L = (1 - mrefdfiltru)*mrefdfiltru; 
% step(L);
% pause
%filtram erorile cu formula
% L(z) = (1 - M(z)) * M(z) modelul de referinta find mreffiltru


%% Împărțire seturi
uHist1 = uHistSPAB(:,1:idx_split);
uHist2 = uHistSPAB(:,idx_split+1:end);
yHist1 = yHist(:,1:idx_split);
yHist2 = yHist(:,idx_split+1:end);

%% Calcul referință virtuală
for k=3:idx_split-1
    refVirt1(2,k-1) = (1/b1)*(-b2*refVirt1(2,k-2) + yHist1(2,k) + a1*yHist1(2,k-1) + a2*yHist1(2,k-2));
end

for k=3:(N - idx_split)-1
    refVirt2(2,k-1) = (1/b1)*(-b2*refVirt2(2,k-2) + yHist2(2,k) + a1*yHist2(2,k-1) + a2*yHist2(2,k-2));
end

eVirt1(2,:) = refVirt1(2,:) - yHist1(2,1:idx_split);%calcul eroare virtuala
eVirt2(2,:) = refVirt2(2,:) - yHist2(2,1:(N - idx_split));%calcul eroare virtuala
%eroarea virtuala filtrata prin L
eVirt1L(2,:) = filter(L.num{1},L.den{1},eVirt1(2,:));
eVirt2L(2,:) = filter(L.num{1},L.den{1},eVirt2(2,:));
%comanda filtrate 
uHist1L(2,:) = filter(L.num{1},L.den{1},uHist1(2,:));
uHist2L(2,:) = filter(L.num{1},L.den{1},uHist2(2,:));

%% Estimare RHO cu metoda CMMPS
Y = zeros(idx_split,1);
for k=3:idx_split
    Y(k-2) = uHist1L(2,k) - uHist1L(2,k-1);
end

PHI = [eVirt1L(2,3:idx_split)' eVirt1L(2,2:idx_split-1)' eVirt1L(2,1:idx_split-2)'];
RHO = pinv(PHI'*PHI)*PHI'*Y(1:idx_split-2);

d = 0;
save('dateinitiale.mat','refVirt1','refVirt2','eVirt1','eVirt2','yHist1','uHist1','yHist2','uHist2','b1','b2','a1','a2','N','Te','d','mrefdfiltru','uHist1L','uHist2L','eVirt1L','eVirt2L')
functie1(RHO,idx_split,eVirt1L,uHist1L)
validare_MFC_VRFT_x(RHO,Te,idx_split,d,uHist2,yHist2,refVirt2,uHist2L,eVirt2L)
DZmin_X = -0.05;   % sau o valoare potrivită pentru sistemul tău
DZmax_X = 0.05;
Ts = 0.01;         % exemplu de pas de eșantionare în secunde
Te = 0.01; % sau orice altă valoare potrivită

testare_MFC_VRFT_x(RHO,Te)

% Afisare
figure;
subplot(3,1,1);
plot(refVirt1(2,:), 'g'); hold on;
plot(yHist1(2,1:idx_split), 'r'); grid on;
legend('Ref. Virtuală', 'Ieșire reală');
title('Răspuns sistem față de referință virtuală');

subplot(3,1,2);
plot(eVirt1(2,:)); title('Eroarea virtuală'); grid on;

subplot(3,1,3);
plot(uHist1L(2,:), 'k'); title('Comandă filtrată L'); grid on;
%u(k) = u(k-1) + K1 * e(k) + K2 * e(k-1) + K3 * e(k-2) PID incremental
